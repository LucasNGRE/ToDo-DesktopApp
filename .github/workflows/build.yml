name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Exécuter uniquement lors d'un tag versionné comme v1.0.0

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest]  # Build sur macOS et Windows

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          echo "📦 Installing dependencies..."
          npm install
          npm list  # Vérifier les dépendances installées
          echo "✅ Dependencies installed."

      - name: Debug GH_TOKEN  # Étape pour vérifier si le token est bien défini
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            if ($env:GH_TOKEN -eq $null) { Write-Host "❌ GH_TOKEN is NOT set!" ; exit 1 } else { Write-Host "✅ GH_TOKEN is set." }
          else
            if [ -z "$GH_TOKEN" ]; then
              echo "❌ GH_TOKEN is NOT set!"
              exit 1
            else
              echo "✅ GH_TOKEN is set."
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Build app
        run: |
          echo "⚙️ Building application..."
          npm run build
          echo "✅ Build process completed."

      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: release-build
          path: dist/

      - name: Debug Git & Tags  # Vérifie l'état de Git et les tags
        run: |
          echo "📌 Current Git branch and tags:"
          git branch -a
          git tag -l
          echo "✅ Git setup verified."

      - name: Push release to GitHub
        run: |
          echo "🚀 Creating release for tag ${{ github.ref_name }}..."
          git push origin ${{ github.ref_name }}
          echo "✅ Release pushed."
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
